# -*- coding: utf-8 -*-
"""project_retail sale prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qYscUoXSiMxjzPU76wXjjJAWGko9yEQC
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Machine Learning Internship (2025- summer)/Datasets/retail_sales_dataset.csv')

df

df['Date'] = pd.to_datetime(df['Date'])
df['Month'] = df['Date'].dt.month
df['DayOfWeek'] = df['Date'].dt.dayofweek
df['Day']=df['Date'].dt.day
df['Year'] = df['Date'].dt.year

df

from sklearn.preprocessing import LabelEncoder
label_encoders = {}
for col in ['Gender', 'Product Category']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

df

from matplotlib import pyplot as plt

plt.plot()

print(df['Total Amount'].value_counts())

# features = ['Gender','Age','Product Category','Quantity','Price per Unit','Month','DayOfWeek','Day','Year']
features = ['Gender','Age','Product Category','Price per Unit','Month','DayOfWeek','Day','Year']

x = df[features]
y = df['Total Amount']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state = 0)

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators = 100,random_state=0)

model.fit(x_train,y_train)

y_pred = model.predict(x_test)

print(y_pred)
print('_______________________________________________________________________')
print(model.predict(x_test))

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error:', mse)

from sklearn.metrics import r2_score
r2 = r2_score(y_test, y_pred)
print('R-squared:', r2)

sample_df = pd.DataFrame([{
    'Gender': 1,
    'Age': 34,
    'Product Category':0 ,
    'Price per Unit': 50,
    'Month': 11,
    'DayOfWeek': 0,
    'Day': 24,
    'Year': 2023
}])

prediction = model.predict(sample_df)
print(f"Predicted Total Amount: {prediction[0]}")

plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.6, color='green')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.grid(True)
plt.show()

df['Product Category'].value_counts()

gender = int(input("enter 1 for male and 0 for female: "))
age = int(input("enter age: "))
product_category = int(input("enter product category [0 for beauty, 1 for clothing, 2 for electronics] : "))
price_per_unit = int(input("enter price per unit: "))
month = int(input("enter month in numeric value : "))
day_of_week = int(input("enter day of week [sunday:0,monday:1,tuesday:2,wednesday:3,thursday:4,friday:5,saturday:6] : "))
day = int(input("enter day  : "))
year = int(input("enter year: "))

user_df = pd.DataFrame([{
    'Gender': gender,
    'Age': age,
    'Product Category':product_category ,
    'Price per Unit': price_per_unit,
    'Month': month,
    'DayOfWeek': day_of_week,
    'Day': day,
    'Year': year
}])

user_prediction = model.predict(user_df)
print(f"Predicted Total Amount: {user_prediction[0]}")

import pickle

# Save the trained model to a file
with open("model.pkl", "wb") as f:
    pickle.dump(model, f)